OpenCL global_barrier
"PodWW Rfe PodRR Fre"
Prefetch=0:x=F,0:y=W,1:y=F,1:x=T
Com=Rf Fr
Orig=PodWW Rfe PodRR Fre

{
[f0] = 0;
[f1] = 0;
[g0] = 0;
[g1] = 0;
}

P0 (__global int* f0, __global int* f1) { // slave wg0, wi0
  B1: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(f0, 1, memory_order_release);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r2 = atomic_load_explicit(g0, memory_order_acquire);
   
  B3: barrier(CLK_GLOBAL_MEM_FENCE);
}

P1 (__global int* f0, __global int* f1) { // slave wg0, wi1
  B1: barrier(CLK_GLOBAL_MEM_FENCE);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  B3: barrier(CLK_GLOBAL_MEM_FENCE);

}

P2 (__global int* f0, __global int* f1) { // master wg, wi0

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r0 = atomic_load_explicit(f0, memory_order_acquire);

  B2: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(g0, 1, memory_order_release);
}

P3 (__global int* f0, __global int* f1) { // master wg, wi1

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r1 = atomic_load_explicit(f1, memory_order_acquire);

  B2: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(g1, 1, memory_order_release);
}



P4 (__global int* f0, __global int* f1) { // slave wg1, wi0
  B11: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(f1, 1, memory_order_release);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r4 = atomic_load_explicit(g1, memory_order_acquire);
   
  B31: barrier(CLK_GLOBAL_MEM_FENCE);
}

P5 (__global int* f0, __global int* f1) { // slave wg1, wi1
  B11: barrier(CLK_GLOBAL_MEM_FENCE);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  B31: barrier(CLK_GLOBAL_MEM_FENCE);

}

scopeTree
(device (work_group P0 P1) (work_group P2 P3) (work_group P4 P5))

exists (2:r0=1 /\ 3:r1=1 /\ 0:r2=1 /\ 4:r4=1 )