PPC
(* Model for Power *)

(* Uniproc *)
acyclic po-loc | rf | fr | co

(* Utilities *)
let dd = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)
let addrpo = addr;po


(*******)
(* ppo *)
(*******)

(* Initial value *)
let ci0 = ctrlisync | detour
let ii0 = dd | rfi | rdw
let cc0 = dd | po-loc | ctrl | addrpo
let ic0 = 0

(* Fixpoint from i -> c in instructions and transitivity *)
let rec ci = ci0 | (ci;ii) | (cc;ci)
and ii = ii0 | ci | (ic;ci) | (ii;ii)
and cc = cc0 | ci | (ci;ic) | (cc;cc)
and ic = ic0 | ii | cc | (ic;cc) | (ii ; ic) (* | ci inclus dans ii et cc *)

let ppoR = RR(ii)
and ppoW = RW(ic)
let ppo = ppoR | ppoW
show ppo

(* fences *)
let lwsync=WW(lwsync)|RR(lwsync)|RW(lwsync)
let eieio=WW(eieio)
show sync, lwsync, eieio

(* All arm barriers are strong *)
let strong = sync
let light = lwsync|eieio
let fence = strong|light

(* extensions *)
let ppoext = (rfe;ppo)|(ppo;rfe)|(rfe;ppo;rfe)
let fenceext = (rfe;fence)|(fence;rfe)|(rfe;fence;rfe)

(* happens before *)
let hb = ppo | ppoext | fence | fenceext
let GHB = hb
show GHB
acyclic hb

(* prop *)
let hbstar = hb*
let propbase = (fence|fenceext);hbstar
show propbase

let chapo = rfe|fre|coe|(fre;rfe)|(coe;rfe)

let prop = WW(propbase)| (chapo? ; propbase*; strong; hbstar)

#show prop
acyclic co|prop
irreflexive fre;prop;hbstar

