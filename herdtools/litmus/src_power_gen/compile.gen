| `Pb (DontSetAA,DontSetLK,target_addr) ->
    { empty_ins with
    memo=sprintf "b %i" target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pb (SetAA,DontSetLK,target_addr) ->
    { empty_ins with
    memo=sprintf "ba %i" target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pb (DontSetAA,SetLK,target_addr) ->
    { empty_ins with
    memo=sprintf "bl %i" target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pb (SetAA,SetLK,target_addr) ->
    { empty_ins with
    memo=sprintf "bla %i" target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pbc (DontSetAA,DontSetLK,bO,bI,target_addr) ->
    { empty_ins with
    memo=sprintf "bc %i,%i,%i" bO bI target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pbc (SetAA,DontSetLK,bO,bI,target_addr) ->
    { empty_ins with
    memo=sprintf "bca %i,%i,%i" bO bI target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pbc (DontSetAA,SetLK,bO,bI,target_addr) ->
    { empty_ins with
    memo=sprintf "bcl %i,%i,%i" bO bI target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pbc (SetAA,SetLK,bO,bI,target_addr) ->
    { empty_ins with
    memo=sprintf "bcla %i,%i,%i" bO bI target_addr;
    inputs=[];
    outputs=[]; }::k
| `Pbclr (DontSetLK,bO,bI,bH) ->
    { empty_ins with
    memo=sprintf "bclr %i,%i,%i" bO bI bH;
    inputs=[];
    outputs=[]; }::k
| `Pbclr (SetLK,bO,bI,bH) ->
    { empty_ins with
    memo=sprintf "bclrl %i,%i,%i" bO bI bH;
    inputs=[];
    outputs=[]; }::k
| `Pbcctr (DontSetLK,bO,bI,bH) ->
    { empty_ins with
    memo=sprintf "bcctr %i,%i,%i" bO bI bH;
    inputs=[];
    outputs=[]; }::k
| `Pbcctr (SetLK,bO,bI,bH) ->
    { empty_ins with
    memo=sprintf "bcctrl %i,%i,%i" bO bI bH;
    inputs=[];
    outputs=[]; }::k
| `Pcrand (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "crand %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcrnand (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "crnand %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcror (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "cror %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcrxor (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "crxor %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcrnor (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "crnor %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcreqv (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "creqv %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcrandc (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "crandc %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pcrorc (bT,bA,bB) ->
    { empty_ins with
    memo=sprintf "crorc %i,%i,%i" bT bA bB;
    inputs=[];
    outputs=[]; }::k
| `Pmcrf (bF,bFA) ->
    { empty_ins with
    memo=sprintf "mcrf %i,%i" bF bFA;
    inputs=[];
    outputs=[]; }::k
| `Psc (lEV) ->
    { empty_ins with
    memo=sprintf "sc %i" lEV;
    inputs=[];
    outputs=[]; }::k
| `Pscv (lEV) ->
    { empty_ins with
    memo=sprintf "scv %i" lEV;
    inputs=[];
    outputs=[]; }::k
| `Plbz (rT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lbz ^o0,%i(0)" d
      else sprintf "lbz ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Plbzx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lbzx ^o0,0,^i0" 
      else sprintf "lbzx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plbzu (rT,d,rA) ->
    { empty_ins with
    memo=sprintf "lbzu ^o0,%i(^i0)" d;
    inputs=[rA];
    outputs=[rT; rA]; }::k
| `Plbzux (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lbzux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT; rA]; }::k
| `Plhz (rT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lhz ^o0,%i(0)" d
      else sprintf "lhz ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Plhzx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lhzx ^o0,0,^i0" 
      else sprintf "lhzx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plhzu (rT,d,rA) ->
    { empty_ins with
    memo=sprintf "lhzu ^o0,%i(^i0)" d;
    inputs=[rA];
    outputs=[rT; rA]; }::k
| `Plhzux (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lhzux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT; rA]; }::k
| `Plha (rT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lha ^o0,%i(0)" d
      else sprintf "lha ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Plhax (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lhax ^o0,0,^i0" 
      else sprintf "lhax ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plhau (rT,d,rA) ->
    { empty_ins with
    memo=sprintf "lhau ^o0,%i(^i0)" d;
    inputs=[rA];
    outputs=[rT; rA]; }::k
| `Plhaux (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lhaux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT; rA]; }::k
| `Plwz (rT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lwz ^o0,%i(0)" d
      else sprintf "lwz ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Plwzx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lwzx ^o0,0,^i0" 
      else sprintf "lwzx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plwzu (rT,d,rA) ->
    { empty_ins with
    memo=sprintf "lwzu ^o0,%i(^i0)" d;
    inputs=[rA];
    outputs=[rT; rA]; }::k
| `Plwzux (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lwzux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT; rA]; }::k
| `Plwa (rT,dS,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lwa ^o0,%i(0)" dS
      else sprintf "lwa ^o0,%i(^i0)" dS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Plwax (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lwax ^o0,0,^i0" 
      else sprintf "lwax ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plwaux (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lwaux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT; rA]; }::k
| `Pld (rT,dS,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "ld ^o0,%i(0)" dS
      else sprintf "ld ^o0,%i(^i0)" dS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Pldx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "ldx ^o0,0,^i0" 
      else sprintf "ldx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pldu (rT,dS,rA) ->
    { empty_ins with
    memo=sprintf "ldu ^o0,%i(^i0)" dS;
    inputs=[rA];
    outputs=[rT; rA]; }::k
| `Pldux (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "ldux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT; rA]; }::k
| `Pstb (rS,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stb ^i0,%i(0)" d
      else sprintf "stb ^i0,%i(^i1)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS] else [rS; rA]);
    outputs=[]; }::k
| `Pstbx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stbx ^i0,0,^i1" 
      else sprintf "stbx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Pstbu (rS,d,rA) ->
    { empty_ins with
    memo=sprintf "stbu ^i0,%i(^i1)" d;
    inputs=[rS; rA];
    outputs=[rA]; }::k
| `Pstbux (rS,rA,rB) ->
    { empty_ins with
    memo=sprintf "stbux ^i0,^i1,^i2" ;
    inputs=[rS; rA; rB];
    outputs=[rA]; }::k
| `Psth (rS,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "sth ^i0,%i(0)" d
      else sprintf "sth ^i0,%i(^i1)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS] else [rS; rA]);
    outputs=[]; }::k
| `Psthx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "sthx ^i0,0,^i1" 
      else sprintf "sthx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Psthu (rS,d,rA) ->
    { empty_ins with
    memo=sprintf "sthu ^i0,%i(^i1)" d;
    inputs=[rS; rA];
    outputs=[rA]; }::k
| `Psthux (rS,rA,rB) ->
    { empty_ins with
    memo=sprintf "sthux ^i0,^i1,^i2" ;
    inputs=[rS; rA; rB];
    outputs=[rA]; }::k
| `Pstw (rS,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stw ^i0,%i(0)" d
      else sprintf "stw ^i0,%i(^i1)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS] else [rS; rA]);
    outputs=[]; }::k
| `Pstwx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stwx ^i0,0,^i1" 
      else sprintf "stwx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Pstwu (rS,d,rA) ->
    { empty_ins with
    memo=sprintf "stwu ^i0,%i(^i1)" d;
    inputs=[rS; rA];
    outputs=[rA]; }::k
| `Pstwux (rS,rA,rB) ->
    { empty_ins with
    memo=sprintf "stwux ^i0,^i1,^i2" ;
    inputs=[rS; rA; rB];
    outputs=[rA]; }::k
| `Pstd (rS,dS,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "std ^i0,%i(0)" dS
      else sprintf "std ^i0,%i(^i1)" dS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS] else [rS; rA]);
    outputs=[]; }::k
| `Pstdx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stdx ^i0,0,^i1" 
      else sprintf "stdx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Pstdu (rS,dS,rA) ->
    { empty_ins with
    memo=sprintf "stdu ^i0,%i(^i1)" dS;
    inputs=[rS; rA];
    outputs=[rA]; }::k
| `Pstdux (rS,rA,rB) ->
    { empty_ins with
    memo=sprintf "stdux ^i0,^i1,^i2" ;
    inputs=[rS; rA; rB];
    outputs=[rA]; }::k
| `Plq (rTp,dQ,rA,pT) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lq %i,%i(0),%i" rTp dQ pT
      else sprintf "lq %i,%i(^i0),%i" rTp dQ pT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rA]; }::k
| `Pstq (rSp,dS,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stq %i,%i(0)" rSp dS
      else sprintf "stq %i,%i(^i0)" rSp dS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[]; }::k
| `Plhbrx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lhbrx ^o0,0,^i0" 
      else sprintf "lhbrx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Psthbrx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "sthbrx ^i0,0,^i1" 
      else sprintf "sthbrx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Plwbrx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lwbrx ^o0,0,^i0" 
      else sprintf "lwbrx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pstwbrx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stwbrx ^i0,0,^i1" 
      else sprintf "stwbrx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Pldbrx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "ldbrx ^o0,0,^i0" 
      else sprintf "ldbrx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pstdbrx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stdbrx ^i0,0,^i1" 
      else sprintf "stdbrx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rS; rB] else [rS; rA; rB]);
    outputs=[]; }::k
| `Plmw (rT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lmw ^o0,%i(0)" d
      else sprintf "lmw ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[] @ (A.regs_interval rT); }::k
| `Pstmw (rS,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stmw ^i0,%i(0)" d
      else sprintf "stmw ^i1,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]) @ (A.regs_interval rS);
    outputs=[]; }::k
| `Plswi (rT,rA,nB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lswi %i,0,%i" rT nB
      else sprintf "lswi %i,^i0,%i" rT nB;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[]; }::k
| `Plswx (rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lswx ^o0,0,^i0" 
      else sprintf "lswx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pstswi (rS,rA,nB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stswi %i,0,%i" rS nB
      else sprintf "stswi %i,^i0,%i" rS nB;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[]; }::k
| `Pstswx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stswx %i,0,^i0" rS
      else sprintf "stswx %i,^i0,^i1" rS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[]; }::k
| `Paddi (rT,rA,sI) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "addi ^o0,0,%i" sI
      else sprintf "addi ^o0,^i0,%i" sI;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Paddis (rT,rA,sI) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "addis ^o0,0,%i" sI
      else sprintf "addis ^o0,^i0,%i" sI;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rT]; }::k
| `Padd (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "add ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padd (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "add. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padd (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padd (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubf (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subf ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubf (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subf. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubf (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubf (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Paddic (rT,rA,sI) ->
    { empty_ins with
    memo=sprintf "addic ^o0,^i0,%i" sI;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddicdot (rT,rA,sI) ->
    { empty_ins with
    memo=sprintf "addic. ^o0,^i0,%i" sI;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfic (rT,rA,sI) ->
    { empty_ins with
    memo=sprintf "subfic ^o0,^i0,%i" sI;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddc (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addc ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Paddc (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addc. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Paddc (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addco ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Paddc (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addco. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfc (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfc ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfc (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfc. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfc (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfco ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfc (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfco. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padde (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "adde ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padde (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "adde. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padde (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addeo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Padde (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addeo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfe (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfe ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfe (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfe. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfe (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfeo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Psubfe (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "subfeo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Paddme (DontSetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addme ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddme (DontSetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addme. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddme (SetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addmeo ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddme (SetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addmeo. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfme (DontSetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfme ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfme (DontSetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfme. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfme (SetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfmeo ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfme (SetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfmeo. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddze (DontSetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addze ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddze (DontSetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addze. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddze (SetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addzeo ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Paddze (SetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "addzeo. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfze (DontSetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfze ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfze (DontSetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfze. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfze (SetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfzeo ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Psubfze (SetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "subfzeo. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Pneg (DontSetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "neg ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Pneg (DontSetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "neg. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Pneg (SetSOOV,DontSetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "nego ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Pneg (SetSOOV,SetCR0,rT,rA) ->
    { empty_ins with
    memo=sprintf "nego. ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Pmulli (rT,rA,sI) ->
    { empty_ins with
    memo=sprintf "mulli ^o0,^i0,%i" sI;
    inputs=[rA];
    outputs=[rT]; }::k
| `Pmullw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mullw ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmullw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mullw. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmullw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mullwo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmullw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mullwo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhw (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhw ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhw (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhw. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhwu (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhwu ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhwu (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhwu. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divw ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divw. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwu ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwu. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwuo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwuo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwe (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwe ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwe (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divwe. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwe (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divweo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivwe (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divweo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivweu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divweu ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivweu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divweu. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivweu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divweuo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivweu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divweuo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulld (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulld ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulld (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulld. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulld (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulldo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulld (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulldo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhd (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhd ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhd (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhd. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhdu (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhdu ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmulhdu (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "mulhdu. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivd (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divd ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivd (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divd. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivd (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivd (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdu ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdu. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divduo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divduo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivde (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divde ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivde (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divde. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivde (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdeo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivde (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdeo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdeu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdeu ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdeu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdeu. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdeu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdeuo ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pdivdeu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "divdeuo. ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pcmpi (bF,l,rA,sI) ->
    { empty_ins with
    memo=sprintf "cmpi %i,%i,^i0,%i" bF l sI;
    inputs=[rA];
    outputs=[]; }::k
| `Pcmp (bF,l,rA,rB) ->
    { empty_ins with
    memo=sprintf "cmp %i,%i,^i0,^i1" bF l;
    inputs=[rA; rB];
    outputs=[]; }::k
| `Pcmpli (bF,l,rA,uI) ->
    { empty_ins with
    memo=sprintf "cmpli %i,%i,^i0,%i" bF l uI;
    inputs=[rA];
    outputs=[]; }::k
| `Pcmpl (bF,l,rA,rB) ->
    { empty_ins with
    memo=sprintf "cmpl %i,%i,^i0,^i1" bF l;
    inputs=[rA; rB];
    outputs=[]; }::k
| `Ptwi (tO,rA,sI) ->
    { empty_ins with
    memo=sprintf "twi %i,^i0,%i" tO sI;
    inputs=[rA];
    outputs=[]; }::k
| `Ptw (tO,rA,rB) ->
    { empty_ins with
    memo=sprintf "tw %i,^i0,^i1" tO;
    inputs=[rA; rB];
    outputs=[]; }::k
| `Ptdi (tO,rA,sI) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "tdi %i,0,%i" tO sI
      else sprintf "tdi %i,^i0,%i" tO sI;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[rA]; }::k
| `Ptd (tO,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "td %i,0,^o1" tO
      else sprintf "td %i,^i0,^i1" tO;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pisel (rT,rA,rB,bC) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "isel ^o0,0,^i0,%i" bC
      else sprintf "isel ^o0,^i0,^i1,%i" bC;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pandi (rA,rS,uI) ->
    { empty_ins with
    memo=sprintf "andi. ^o0,^i0,%i" uI;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pandis (rA,rS,uI) ->
    { empty_ins with
    memo=sprintf "andis. ^o0,^i0,%i" uI;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pori (rA,rS,uI) ->
    { empty_ins with
    memo=sprintf "ori ^o0,^i0,%i" uI;
    inputs=[rS];
    outputs=[rA]; }::k
| `Poris (rA,rS,uI) ->
    { empty_ins with
    memo=sprintf "oris ^o0,^i0,%i" uI;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pxori (rA,rS,uI) ->
    { empty_ins with
    memo=sprintf "xori ^o0,^i0,%i" uI;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pxoris (rA,rS,uI) ->
    { empty_ins with
    memo=sprintf "xoris ^o0,^i0,%i" uI;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pand (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "and ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pand (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "and. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pxor (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "xor ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pxor (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "xor. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pnand (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "nand ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pnand (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "nand. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Por (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "or ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Por (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "or. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pnor (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "nor ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pnor (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "nor. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Peqv (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "eqv ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Peqv (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "eqv. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pandc (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "andc ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pandc (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "andc. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Porc (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "orc ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Porc (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "orc. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pextsb (DontSetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "extsb ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pextsb (SetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "extsb. ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pextsh (DontSetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "extsh ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pextsh (SetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "extsh. ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pcntlzw (DontSetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "cntlzw ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pcntlzw (SetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "cntlzw. ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pcmpb (rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "cmpb ^o0,%i,^i0" rS;
    inputs=[rB];
    outputs=[rA]; }::k
| `Ppopcntb (rA,rS) ->
    { empty_ins with
    memo=sprintf "popcntb ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Ppopcntw (rA,rS) ->
    { empty_ins with
    memo=sprintf "popcntw ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pprtyd (rA,rS) ->
    { empty_ins with
    memo=sprintf "prtyd ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pprtyw (rA,rS) ->
    { empty_ins with
    memo=sprintf "prtyw ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pextsw (DontSetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "extsw ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pextsw (SetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "extsw. ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pcntlzd (DontSetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "cntlzd ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pcntlzd (SetCR0,rA,rS) ->
    { empty_ins with
    memo=sprintf "cntlzd. ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Ppopcntd (rA,rS) ->
    { empty_ins with
    memo=sprintf "popcntd ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pbpermd (rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "bpermd ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prlwinm (DontSetCR0,rA,rS,sH,mB,mE) ->
    { empty_ins with
    memo=sprintf "rlwinm ^o0,^i0,%i,%i,%i" sH mB mE;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prlwinm (SetCR0,rA,rS,sH,mB,mE) ->
    { empty_ins with
    memo=sprintf "rlwinm. ^o0,^i0,%i,%i,%i" sH mB mE;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prlwnm (DontSetCR0,rA,rS,rB,mB,mE) ->
    { empty_ins with
    memo=sprintf "rlwnm ^o0,^i0,^i1,%i,%i" mB mE;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prlwnm (SetCR0,rA,rS,rB,mB,mE) ->
    { empty_ins with
    memo=sprintf "rlwnm. ^o0,^i0,^i1,%i,%i" mB mE;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prlwimi (DontSetCR0,rA,rS,sH,mB,mE) ->
    { empty_ins with
    memo=sprintf "rlwimi ^i0,^i1,%i,%i,%i" sH mB mE;
    inputs=[rA; rS];
    outputs=[rA]; }::k
| `Prlwimi (SetCR0,rA,rS,sH,mB,mE) ->
    { empty_ins with
    memo=sprintf "rlwimi. ^i0,^i1,%i,%i,%i" sH mB mE;
    inputs=[rA; rS];
    outputs=[rA]; }::k
| `Prldicl (DontSetCR0,rA,rS,sH,mB) ->
    { empty_ins with
    memo=sprintf "rldicl ^o0,^i0,%i,%i" sH mB;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prldicl (SetCR0,rA,rS,sH,mB) ->
    { empty_ins with
    memo=sprintf "rldicl. ^o0,^i0,%i,%i" sH mB;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prldicr (DontSetCR0,rA,rS,sH,mE) ->
    { empty_ins with
    memo=sprintf "rldicr ^o0,^i0,%i,%i" sH mE;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prldicr (SetCR0,rA,rS,sH,mE) ->
    { empty_ins with
    memo=sprintf "rldicr. ^o0,^i0,%i,%i" sH mE;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prldic (DontSetCR0,rA,rS,sH,mB) ->
    { empty_ins with
    memo=sprintf "rldic ^o0,^i0,%i,%i" sH mB;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prldic (SetCR0,rA,rS,sH,mB) ->
    { empty_ins with
    memo=sprintf "rldic. ^o0,^i0,%i,%i" sH mB;
    inputs=[rS];
    outputs=[rA]; }::k
| `Prldcl (DontSetCR0,rA,rS,rB,mB) ->
    { empty_ins with
    memo=sprintf "rldcl ^o0,^i0,^i1,%i" mB;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prldcl (SetCR0,rA,rS,rB,mB) ->
    { empty_ins with
    memo=sprintf "rldcl. ^o0,^i0,^i1,%i" mB;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prldcr (DontSetCR0,rA,rS,rB,mE) ->
    { empty_ins with
    memo=sprintf "rldcr ^o0,^i0,^i1,%i" mE;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prldcr (SetCR0,rA,rS,rB,mE) ->
    { empty_ins with
    memo=sprintf "rldcr. ^o0,^i0,^i1,%i" mE;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Prldimi (DontSetCR0,rA,rS,sH,mB) ->
    { empty_ins with
    memo=sprintf "rldimi ^i0,^i1,%i,%i" sH mB;
    inputs=[rA; rS];
    outputs=[rA]; }::k
| `Prldimi (SetCR0,rA,rS,sH,mB) ->
    { empty_ins with
    memo=sprintf "rldimi. ^i0,^i1,%i,%i" sH mB;
    inputs=[rA; rS];
    outputs=[rA]; }::k
| `Pslw (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "slw ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pslw (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "slw. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psrw (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "srw ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psrw (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "srw. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psrawi (DontSetCR0,rA,rS,sH) ->
    { empty_ins with
    memo=sprintf "srawi ^o0,^i0,%i" sH;
    inputs=[rS];
    outputs=[rA]; }::k
| `Psrawi (SetCR0,rA,rS,sH) ->
    { empty_ins with
    memo=sprintf "srawi. ^o0,^i0,%i" sH;
    inputs=[rS];
    outputs=[rA]; }::k
| `Psraw (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "sraw ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psraw (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "sraw. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psld (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "sld ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psld (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "sld. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psrd (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "srd ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psrd (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "srd. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psradi (DontSetCR0,rA,rS,sH) ->
    { empty_ins with
    memo=sprintf "sradi ^o0,^i0,%i" sH;
    inputs=[rS];
    outputs=[rA]; }::k
| `Psradi (SetCR0,rA,rS,sH) ->
    { empty_ins with
    memo=sprintf "sradi. ^o0,^i0,%i" sH;
    inputs=[rS];
    outputs=[rA]; }::k
| `Psrad (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "srad ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Psrad (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo=sprintf "srad. ^o0,^i0,^i1" ;
    inputs=[rS; rB];
    outputs=[rA]; }::k
| `Pcdtbcd (rA,rS) ->
    { empty_ins with
    memo=sprintf "cdtbcd ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Pcbcdtd (rA,rS) ->
    { empty_ins with
    memo=sprintf "cbcdtd ^o0,^i0" ;
    inputs=[rS];
    outputs=[rA]; }::k
| `Paddg6s (rT,rA,rB) ->
    { empty_ins with
    memo=sprintf "addg6s ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[rT]; }::k
| `Pmtspr (sPR,rS) ->
    { empty_ins with
    memo=sprintf "mtspr %i,^i0" sPR;
    inputs=[rS];
    outputs=[]; }::k
| `Pmfspr (rT,sPR) ->
    { empty_ins with
    memo=sprintf "mfspr ^o0,%i" sPR;
    inputs=[];
    outputs=[rT]; }::k
| `Pmtcrf (fXM,rS) ->
    { empty_ins with
    memo=sprintf "mtcrf %i,^i0" fXM;
    inputs=[rS];
    outputs=[]; }::k
| `Pmfcr (rT) ->
    { empty_ins with
    memo=sprintf "mfcr ^o0" ;
    inputs=[];
    outputs=[rT]; }::k
| `Pmtocrf (fXM,rS) ->
    { empty_ins with
    memo=sprintf "mtocrf %i,^i0" fXM;
    inputs=[rS];
    outputs=[]; }::k
| `Pmfocrf (rT,fXM) ->
    { empty_ins with
    memo=sprintf "mfocrf ^o0,%i" fXM;
    inputs=[];
    outputs=[rT]; }::k
| `Pmcrxr (bF) ->
    { empty_ins with
    memo=sprintf "mcrxr %i" bF;
    inputs=[];
    outputs=[]; }::k
| `Pmtdcrux (rS,rA) ->
    { empty_ins with
    memo=sprintf "mtdcrux %i,^i0" rS;
    inputs=[rA];
    outputs=[]; }::k
| `Pmfdcrux (rT,rA) ->
    { empty_ins with
    memo=sprintf "mfdcrux ^o0,^i0" ;
    inputs=[rA];
    outputs=[rT]; }::k
| `Plfs (fRT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfs ^o0,%i(0)" d
      else sprintf "lfs ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[fRT]; }::k
| `Plfsx (fRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfsx ^o0,0,^i0" 
      else sprintf "lfsx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[fRT]; }::k
| `Plfsu (fRT,d,rA) ->
    { empty_ins with
    memo=sprintf "lfsu ^o0,%i(^i0)" d;
    inputs=[rA];
    outputs=[fRT; rA]; }::k
| `Plfsux (fRT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lfsux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[fRT; rA]; }::k
| `Plfd (fRT,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfd ^o0,%i(0)" d
      else sprintf "lfd ^o0,%i(^i0)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[fRT]; }::k
| `Plfdx (fRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfdx ^o0,0,^i0" 
      else sprintf "lfdx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[fRT]; }::k
| `Plfdu (fRT,d,rA) ->
    { empty_ins with
    memo=sprintf "lfdu ^o0,%i(^i0)" d;
    inputs=[rA];
    outputs=[fRT; rA]; }::k
| `Plfdux (fRT,rA,rB) ->
    { empty_ins with
    memo=sprintf "lfdux ^o0,^i0,^i1" ;
    inputs=[rA; rB];
    outputs=[fRT; rA]; }::k
| `Plfiwax (fRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfiwax ^o0,0,^i0" 
      else sprintf "lfiwax ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[fRT]; }::k
| `Plfiwzx (fRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfiwzx ^o0,0,^i0" 
      else sprintf "lfiwzx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[fRT]; }::k
| `Pstfs (fRS,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfs ^i0,%i(0)" d
      else sprintf "stfs ^i0,%i(^i1)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [fRS] else [fRS; rA]);
    outputs=[]; }::k
| `Pstfsx (fRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfsx ^i0,0,^i1" 
      else sprintf "stfsx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [fRS; rB] else [fRS; rA; rB]);
    outputs=[]; }::k
| `Pstfsu (fRS,d,rA) ->
    { empty_ins with
    memo=sprintf "stfsu ^i0,%i(^i1)" d;
    inputs=[fRS; rA];
    outputs=[rA]; }::k
| `Pstfsux (fRS,rA,rB) ->
    { empty_ins with
    memo=sprintf "stfsux ^i0,^i1,^i2" ;
    inputs=[fRS; rA; rB];
    outputs=[rA]; }::k
| `Pstfd (fRS,d,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfd ^i0,%i(0)" d
      else sprintf "stfd ^i0,%i(^i1)" d;
    inputs=
      (if rA = A.Ireg A.GPR0 then [fRS] else [fRS; rA]);
    outputs=[]; }::k
| `Pstfdx (fRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfdx ^i0,0,^i1" 
      else sprintf "stfdx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [fRS; rB] else [fRS; rA; rB]);
    outputs=[]; }::k
| `Pstfdu (fRS,d,rA) ->
    { empty_ins with
    memo=sprintf "stfdu ^i0,%i(^i1)" d;
    inputs=[fRS; rA];
    outputs=[rA]; }::k
| `Pstfdux (fRS,rA,rB) ->
    { empty_ins with
    memo=sprintf "stfdux ^i0,^i1,^i2" ;
    inputs=[fRS; rA; rB];
    outputs=[rA]; }::k
| `Pstfiwx (fRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfiwx ^i0,0,^i1" 
      else sprintf "stfiwx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [fRS; rB] else [fRS; rA; rB]);
    outputs=[]; }::k
| `Plfdp (fRTp,dS,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfdp ^o0,%i(0)" dS
      else sprintf "lfdp ^o0,%i(^i0)" dS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[fRTp]; }::k
| `Plfdpx (fRTp,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lfdpx ^o0,0,^i0" 
      else sprintf "lfdpx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[fRTp]; }::k
| `Pstfdp (fRSp,dS,rA) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfdp %i,%i(0)" fRSp dS
      else sprintf "stfdp %i,%i(^i0)" fRSp dS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA]);
    outputs=[]; }::k
| `Pstfdpx (fRSp,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stfdpx %i,0,^i0" fRSp
      else sprintf "stfdpx %i,^i0,^i1" fRSp;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[]; }::k
| `Pfmr (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fmr %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmr (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fmr. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfneg (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fneg %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfneg (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fneg. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfabs (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fabs %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfabs (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fabs. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnabs (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fnabs %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnabs (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fnabs. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcpsgn (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fcpsgn %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcpsgn (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fcpsgn. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfadds (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fadds %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfadds (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fadds. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfadd (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fadd %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfadd (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fadd. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsubs (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fsubs %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsubs (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fsubs. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsub (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fsub %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsub (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fsub. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmuls (DontSetCR0,fRT,fRA,fRC) ->
    { empty_ins with
    memo=sprintf "fmuls %i,%i,%i" fRT fRA fRC;
    inputs=[];
    outputs=[]; }::k
| `Pfmuls (SetCR0,fRT,fRA,fRC) ->
    { empty_ins with
    memo=sprintf "fmuls. %i,%i,%i" fRT fRA fRC;
    inputs=[];
    outputs=[]; }::k
| `Pfmul (DontSetCR0,fRT,fRA,fRC) ->
    { empty_ins with
    memo=sprintf "fmul %i,%i,%i" fRT fRA fRC;
    inputs=[];
    outputs=[]; }::k
| `Pfmul (SetCR0,fRT,fRA,fRC) ->
    { empty_ins with
    memo=sprintf "fmul. %i,%i,%i" fRT fRA fRC;
    inputs=[];
    outputs=[]; }::k
| `Pfdivs (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fdivs %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfdivs (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fdivs. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfdiv (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fdiv %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfdiv (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fdiv. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsqrts (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fsqrts %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsqrts (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fsqrts. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsqrt (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fsqrt %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsqrt (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fsqrt. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfres (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fres %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfres (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fres. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfre (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fre %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfre (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fre. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrsqrtes (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frsqrtes %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrsqrtes (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frsqrtes. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrsqrte (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frsqrte %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrsqrte (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frsqrte. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pftdiv (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "ftdiv %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pftsqrt (bF,fRB) ->
    { empty_ins with
    memo=sprintf "ftsqrt %i,%i" bF fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmadds (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmadds %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmadds (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmadds. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmadd (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmadd %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmadd (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmadd. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmsubs (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmsubs %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmsubs (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmsubs. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmsub (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmsub %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfmsub (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fmsub. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmadds (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmadds %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmadds (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmadds. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmadd (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmadd %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmadd (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmadd. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmsubs (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmsubs %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmsubs (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmsubs. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmsub (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmsub %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfnmsub (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fnmsub. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrsp (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frsp %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrsp (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frsp. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctid (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctid %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctid (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctid. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctidz (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctidz %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctidz (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctidz. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctidu (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctidu %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctidu (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctidu. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiduz (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiduz %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiduz (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiduz. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiw (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiw %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiw (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiw. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiwz (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiwz %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiwz (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiwz. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiwu (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiwu %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiwu (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiwu. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiwuz (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiwuz %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfctiwuz (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fctiwuz. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfid (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfid %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfid (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfid. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfidu (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfidu %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfidu (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfidu. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfids (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfids %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfids (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfids. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfidus (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfidus %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcfidus (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "fcfidus. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrin (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frin %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrin (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frin. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrip (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frip %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrip (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frip. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfriz (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "friz %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfriz (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "friz. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrim (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frim %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfrim (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "frim. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcmpu (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fcmpu %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfcmpo (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "fcmpo %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsel (DontSetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fsel %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pfsel (SetCR0,fRT,fRA,fRC,fRB) ->
    { empty_ins with
    memo=sprintf "fsel. %i,%i,%i,%i" fRT fRA fRC fRB;
    inputs=[];
    outputs=[]; }::k
| `Pmffs (DontSetCR0,fRT) ->
    { empty_ins with
    memo=sprintf "mffs %i" fRT;
    inputs=[];
    outputs=[]; }::k
| `Pmffs (SetCR0,fRT) ->
    { empty_ins with
    memo=sprintf "mffs. %i" fRT;
    inputs=[];
    outputs=[]; }::k
| `Pmcrfs (bF,bFA) ->
    { empty_ins with
    memo=sprintf "mcrfs %i,%i" bF bFA;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsfi (DontSetCR0,bF,u,w) ->
    { empty_ins with
    memo=sprintf "mtfsfi %i,%i,%i" bF u w;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsfi (SetCR0,bF,u,w) ->
    { empty_ins with
    memo=sprintf "mtfsfi. %i,%i,%i" bF u w;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsf (DontSetCR0,fLM,fRB,l,w) ->
    { empty_ins with
    memo=sprintf "mtfsf %i,%i,%i,%i" fLM fRB l w;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsf (SetCR0,fLM,fRB,l,w) ->
    { empty_ins with
    memo=sprintf "mtfsf. %i,%i,%i,%i" fLM fRB l w;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsb0 (DontSetCR0,bT) ->
    { empty_ins with
    memo=sprintf "mtfsb0 %i" bT;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsb0 (SetCR0,bT) ->
    { empty_ins with
    memo=sprintf "mtfsb0. %i" bT;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsb1 (DontSetCR0,bT) ->
    { empty_ins with
    memo=sprintf "mtfsb1 %i" bT;
    inputs=[];
    outputs=[]; }::k
| `Pmtfsb1 (SetCR0,bT) ->
    { empty_ins with
    memo=sprintf "mtfsb1. %i" bT;
    inputs=[];
    outputs=[]; }::k
| `Pdaddq (DontSetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "daddq %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdaddq (SetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "daddq. %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdadd (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dadd %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdadd (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dadd. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdsubq (DontSetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dsubq %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdsubq (SetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dsubq. %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdsub (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dsub %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdsub (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dsub. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdmulq (DontSetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dmulq %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdmulq (SetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dmulq. %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdmul (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dmul %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdmul (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dmul. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pddivq (DontSetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "ddivq %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pddivq (SetCR0,fRTp,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "ddivq. %i,%i,%i" fRTp fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pddiv (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "ddiv %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pddiv (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "ddiv. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdcmpuq (bF,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dcmpuq %i,%i,%i" bF fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdcmpu (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dcmpu %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdcmpoq (bF,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dcmpoq %i,%i,%i" bF fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdcmpo (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dcmpo %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdtstdcq (bF,fRAp,dCM) ->
    { empty_ins with
    memo=sprintf "dtstdcq %i,%i,%i" bF fRAp dCM;
    inputs=[];
    outputs=[]; }::k
| `Pdtstdc (bF,fRA,dCM) ->
    { empty_ins with
    memo=sprintf "dtstdc %i,%i,%i" bF fRA dCM;
    inputs=[];
    outputs=[]; }::k
| `Pdtstdgq (bF,fRAp,dGM) ->
    { empty_ins with
    memo=sprintf "dtstdgq %i,%i,%i" bF fRAp dGM;
    inputs=[];
    outputs=[]; }::k
| `Pdtstdg (bF,fRA,dGM) ->
    { empty_ins with
    memo=sprintf "dtstdg %i,%i,%i" bF fRA dGM;
    inputs=[];
    outputs=[]; }::k
| `Pdtstexq (bF,fRAp,fRBp) ->
    { empty_ins with
    memo=sprintf "dtstexq %i,%i,%i" bF fRAp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdtstex (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dtstex %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdtstsfq (bF,fRA,fRBp) ->
    { empty_ins with
    memo=sprintf "dtstsfq %i,%i,%i" bF fRA fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdtstsf (bF,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "dtstsf %i,%i,%i" bF fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdquaiq (DontSetCR0,tE,fRTp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "dquaiq %i,%i,%i,%i" tE fRTp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdquaiq (SetCR0,tE,fRTp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "dquaiq. %i,%i,%i,%i" tE fRTp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdquai (DontSetCR0,tE,fRT,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "dquai %i,%i,%i,%i" tE fRT fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdquai (SetCR0,tE,fRT,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "dquai. %i,%i,%i,%i" tE fRT fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdquaq (DontSetCR0,fRTp,fRAp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "dquaq %i,%i,%i,%i" fRTp fRAp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdquaq (SetCR0,fRTp,fRAp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "dquaq. %i,%i,%i,%i" fRTp fRAp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdqua (DontSetCR0,fRT,fRA,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "dqua %i,%i,%i,%i" fRT fRA fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdqua (SetCR0,fRT,fRA,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "dqua. %i,%i,%i,%i" fRT fRA fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrrndq (DontSetCR0,fRTp,fRA,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "drrndq %i,%i,%i,%i" fRTp fRA fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrrndq (SetCR0,fRTp,fRA,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "drrndq. %i,%i,%i,%i" fRTp fRA fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrrnd (DontSetCR0,fRT,fRA,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "drrnd %i,%i,%i,%i" fRT fRA fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrrnd (SetCR0,fRT,fRA,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "drrnd. %i,%i,%i,%i" fRT fRA fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintxq (DontSetCR0,r,fRTp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "drintxq %i,%i,%i,%i" r fRTp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintxq (SetCR0,r,fRTp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "drintxq. %i,%i,%i,%i" r fRTp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintx (DontSetCR0,r,fRT,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "drintx %i,%i,%i,%i" r fRT fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintx (SetCR0,r,fRT,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "drintx. %i,%i,%i,%i" r fRT fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintnq (DontSetCR0,r,fRTp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "drintnq %i,%i,%i,%i" r fRTp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintnq (SetCR0,r,fRTp,fRBp,rMC) ->
    { empty_ins with
    memo=sprintf "drintnq. %i,%i,%i,%i" r fRTp fRBp rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintn (DontSetCR0,r,fRT,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "drintn %i,%i,%i,%i" r fRT fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdrintn (SetCR0,r,fRT,fRB,rMC) ->
    { empty_ins with
    memo=sprintf "drintn. %i,%i,%i,%i" r fRT fRB rMC;
    inputs=[];
    outputs=[]; }::k
| `Pdctdp (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dctdp %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdctdp (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dctdp. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdctqpq (DontSetCR0,fRTp,fRB) ->
    { empty_ins with
    memo=sprintf "dctqpq %i,%i" fRTp fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdctqpq (SetCR0,fRTp,fRB) ->
    { empty_ins with
    memo=sprintf "dctqpq. %i,%i" fRTp fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdrsp (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "drsp %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdrsp (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "drsp. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdrdpq (DontSetCR0,fRTp,fRBp) ->
    { empty_ins with
    memo=sprintf "drdpq %i,%i" fRTp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdrdpq (SetCR0,fRTp,fRBp) ->
    { empty_ins with
    memo=sprintf "drdpq. %i,%i" fRTp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdcffix (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dcffix %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdcffix (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dcffix. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdcffixq (DontSetCR0,fRTp,fRB) ->
    { empty_ins with
    memo=sprintf "dcffixq %i,%i" fRTp fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdcffixq (SetCR0,fRTp,fRB) ->
    { empty_ins with
    memo=sprintf "dcffixq. %i,%i" fRTp fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdctfixq (DontSetCR0,fRT,fRBp) ->
    { empty_ins with
    memo=sprintf "dctfixq %i,%i" fRT fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdctfixq (SetCR0,fRT,fRBp) ->
    { empty_ins with
    memo=sprintf "dctfixq. %i,%i" fRT fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdctfix (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dctfix %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdctfix (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dctfix. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pddedpdq (DontSetCR0,sP,fRTp,fRBp) ->
    { empty_ins with
    memo=sprintf "ddedpdq %i,%i,%i" sP fRTp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pddedpdq (SetCR0,sP,fRTp,fRBp) ->
    { empty_ins with
    memo=sprintf "ddedpdq. %i,%i,%i" sP fRTp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pddedpd (DontSetCR0,sP,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "ddedpd %i,%i,%i" sP fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pddedpd (SetCR0,sP,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "ddedpd. %i,%i,%i" sP fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdenbcdq (DontSetCR0,s,fRTp,fRBp) ->
    { empty_ins with
    memo=sprintf "denbcdq %i,%i,%i" s fRTp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdenbcdq (SetCR0,s,fRTp,fRBp) ->
    { empty_ins with
    memo=sprintf "denbcdq. %i,%i,%i" s fRTp fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdenbcd (DontSetCR0,s,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "denbcd %i,%i,%i" s fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdenbcd (SetCR0,s,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "denbcd. %i,%i,%i" s fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdxexq (DontSetCR0,fRT,fRBp) ->
    { empty_ins with
    memo=sprintf "dxexq %i,%i" fRT fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdxexq (SetCR0,fRT,fRBp) ->
    { empty_ins with
    memo=sprintf "dxexq. %i,%i" fRT fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdxex (DontSetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dxex %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdxex (SetCR0,fRT,fRB) ->
    { empty_ins with
    memo=sprintf "dxex. %i,%i" fRT fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdiexq (DontSetCR0,fRTp,fRA,fRBp) ->
    { empty_ins with
    memo=sprintf "diexq %i,%i,%i" fRTp fRA fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdiexq (SetCR0,fRTp,fRA,fRBp) ->
    { empty_ins with
    memo=sprintf "diexq. %i,%i,%i" fRTp fRA fRBp;
    inputs=[];
    outputs=[]; }::k
| `Pdiex (DontSetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "diex %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdiex (SetCR0,fRT,fRA,fRB) ->
    { empty_ins with
    memo=sprintf "diex. %i,%i,%i" fRT fRA fRB;
    inputs=[];
    outputs=[]; }::k
| `Pdscliq (DontSetCR0,fRTp,fRAp,sH) ->
    { empty_ins with
    memo=sprintf "dscliq %i,%i,%i" fRTp fRAp sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscliq (SetCR0,fRTp,fRAp,sH) ->
    { empty_ins with
    memo=sprintf "dscliq. %i,%i,%i" fRTp fRAp sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscli (DontSetCR0,fRT,fRA,sH) ->
    { empty_ins with
    memo=sprintf "dscli %i,%i,%i" fRT fRA sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscli (SetCR0,fRT,fRA,sH) ->
    { empty_ins with
    memo=sprintf "dscli. %i,%i,%i" fRT fRA sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscriq (DontSetCR0,fRTp,fRAp,sH) ->
    { empty_ins with
    memo=sprintf "dscriq %i,%i,%i" fRTp fRAp sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscriq (SetCR0,fRTp,fRAp,sH) ->
    { empty_ins with
    memo=sprintf "dscriq. %i,%i,%i" fRTp fRAp sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscri (DontSetCR0,fRT,fRA,sH) ->
    { empty_ins with
    memo=sprintf "dscri %i,%i,%i" fRT fRA sH;
    inputs=[];
    outputs=[]; }::k
| `Pdscri (SetCR0,fRT,fRA,sH) ->
    { empty_ins with
    memo=sprintf "dscri. %i,%i,%i" fRT fRA sH;
    inputs=[];
    outputs=[]; }::k
| `Plvebx (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvebx ^o0,0,^i0" 
      else sprintf "lvebx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[vRT]; }::k
| `Plvehx (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvehx ^o0,0,^i0" 
      else sprintf "lvehx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[vRT]; }::k
| `Plvewx (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvewx ^o0,0,^i0" 
      else sprintf "lvewx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[vRT]; }::k
| `Plvx (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvx ^o0,0,^i0" 
      else sprintf "lvx ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[vRT]; }::k
| `Plvxl (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvxl ^o0,0,^i0" 
      else sprintf "lvxl ^o0,^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[vRT]; }::k
| `Pstvebx (vRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stvebx %i,0,^i0" vRS
      else sprintf "stvebx %i,^i0,^i1" vRS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[]; }::k
| `Pstvehx (vRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stvehx %i,0,^i0" vRS
      else sprintf "stvehx %i,^i0,^i1" vRS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[]; }::k
| `Pstvewx (vRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stvewx %i,0,^i0" vRS
      else sprintf "stvewx %i,^i0,^i1" vRS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[]; }::k
| `Pstvx (vRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stvx ^i0,0,^i1" 
      else sprintf "stvx ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [vRS; rB] else [vRS; rA; rB]);
    outputs=[]; }::k
| `Pstvxl (vRS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stvxl ^i0,0,^i1" 
      else sprintf "stvxl ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [vRS; rB] else [vRS; rA; rB]);
    outputs=[]; }::k
| `Plvsl (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvsl %i,0,^o1" vRT
      else sprintf "lvsl %i,^i0,^i1" vRT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Plvsr (vRT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lvsr %i,0,^o1" vRT
      else sprintf "lvsr %i,^i0,^i1" vRT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pvpkpx (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkpx ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkshss (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkshss ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkshus (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkshus ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkswss (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkswss ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkswus (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkswus ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkuhum (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkuhum ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkuhus (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkuhus ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkuwum (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkuwum ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvpkuwus (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vpkuwus ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvupkhpx (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vupkhpx ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvupkhsb (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vupkhsb ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvupkhsh (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vupkhsh ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvupklpx (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vupklpx ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvupklsb (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vupklsb ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvupklsh (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vupklsh ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvmrghb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmrghb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmrghh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmrghh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmrghw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmrghw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmrglb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmrglb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmrglh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmrglh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmrglw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmrglw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvspltb (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vspltb ^o0,^i0,%i" uIM;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvsplth (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vsplth ^o0,^i0,%i" uIM;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvspltw (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vspltw ^o0,^i0,%i" uIM;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvspltisb (vRT,sIM) ->
    { empty_ins with
    memo=sprintf "vspltisb ^o0,%i" sIM;
    inputs=[];
    outputs=[vRT]; }::k
| `Pvspltish (vRT,sIM) ->
    { empty_ins with
    memo=sprintf "vspltish ^o0,%i" sIM;
    inputs=[];
    outputs=[vRT]; }::k
| `Pvspltisw (vRT,sIM) ->
    { empty_ins with
    memo=sprintf "vspltisw ^o0,%i" sIM;
    inputs=[];
    outputs=[vRT]; }::k
| `Pvperm (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vperm ^o0,^i0,^i1,^i2" ;
    inputs=[vRA; vRB; vRC];
    outputs=[vRT]; }::k
| `Pvsel (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vsel %i,%i,%i,%i" vRT vRA vRB vRC;
    inputs=[];
    outputs=[]; }::k
| `Pvsl (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsl ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsldoi (vRT,vRA,vRB,sHB) ->
    { empty_ins with
    memo=sprintf "vsldoi ^o0,^i0,^i1,%i" sHB;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvslo (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vslo ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsr (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsr ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsro (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsro ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvaddcuw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddcuw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvaddsbs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddsbs ^o0,%i,%i" vRA vRB;
    inputs=[];
    outputs=[vRT]; }::k
| `Pvaddshs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddshs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvaddsws (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddsws ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvaddubm (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddubm ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvadduhm (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vadduhm ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvadduwm (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vadduwm ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvaddubs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddubs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvadduhs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vadduhs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvadduws (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vadduws ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubcuw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubcuw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubsbs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubsbs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubshs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubshs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubsws (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubsws ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsububm (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsububm ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubuhm (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubuhm ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubuwm (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubuwm ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsububs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsububs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubuhs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubuhs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsubuws (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubuws ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmulesb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmulesb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmulesh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmulesh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmuleub (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmuleub ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmuleuh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmuleuh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmulosb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmulosb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmulosh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmulosh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmuloub (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmuloub ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmulouh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmulouh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmhaddshs (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmhaddshs %i,%i,%i,%i" vRT vRA vRB vRC;
    inputs=[];
    outputs=[]; }::k
| `Pvmhraddshs (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmhraddshs %i,%i,%i,%i" vRT vRA vRB vRC;
    inputs=[];
    outputs=[]; }::k
| `Pvmladduhm (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmladduhm ^o0,^i0,^i1,^i2" ;
    inputs=[vRA; vRB; vRC];
    outputs=[vRT]; }::k
| `Pvmsumubm (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmsumubm ^o0,^i0,^i1,^i2" ;
    inputs=[vRA; vRB; vRC];
    outputs=[vRT]; }::k
| `Pvmsummbm (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmsummbm %i,%i,%i,%i" vRT vRA vRB vRC;
    inputs=[];
    outputs=[]; }::k
| `Pvmsumshm (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmsumshm %i,%i,%i,%i" vRT vRA vRB vRC;
    inputs=[];
    outputs=[]; }::k
| `Pvmsumshs (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmsumshs ^o0,^i0,^i1,^i2" ;
    inputs=[vRA; vRB; vRC];
    outputs=[vRT]; }::k
| `Pvmsumuhm (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmsumuhm ^o0,^i0,^i1,^i2" ;
    inputs=[vRA; vRB; vRC];
    outputs=[vRT]; }::k
| `Pvmsumuhs (vRT,vRA,vRB,vRC) ->
    { empty_ins with
    memo=sprintf "vmsumuhs ^o0,^i0,^i1,^i2" ;
    inputs=[vRA; vRB; vRC];
    outputs=[vRT]; }::k
| `Pvsumsws (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsumsws ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsum2sws (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsum2sws ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsum4sbs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsum4sbs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsum4shs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsum4shs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsum4ubs (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsum4ubs ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvavgsb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vavgsb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvavgsh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vavgsh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvavgsw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vavgsw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvavgub (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vavgub %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvavguh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vavguh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvavguw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vavguw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvmaxsb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxsb %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaxsh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxsh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaxsw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxsw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaxub (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxub %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaxuh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxuh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaxuw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxuw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminsb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminsb %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminsh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminsh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminsw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminsw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminub (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminub %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminuh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminuh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminuw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminuw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpequb (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpequb %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpequb (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpequb. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpequh (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpequh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpequh (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpequh. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpequw (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpequw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpequw (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpequw. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtsb (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtsb %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtsb (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtsb. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtsh (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtsh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtsh (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtsh. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtsw (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtsw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtsw (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtsw. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtub (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtub %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtub (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtub. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtuh (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtuh %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtuh (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtuh. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtuw (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtuw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtuw (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtuw. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvand (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vand ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvandc (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vandc ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvnor (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vnor ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvor (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vor ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvxor (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vxor ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvrlb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vrlb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvrlh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vrlh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvrlw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vrlw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvslb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vslb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvslh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vslh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvslw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vslw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsrb (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsrb ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsrh (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsrh ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsrw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsrw ^o0,^i0,^i1" ;
    inputs=[vRA; vRB];
    outputs=[vRT]; }::k
| `Pvsrab (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsrab %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvsrah (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsrah %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvsraw (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsraw %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvaddfp (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vaddfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvsubfp (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vsubfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaddfp (vRT,vRA,vRC,vRB) ->
    { empty_ins with
    memo=sprintf "vmaddfp %i,%i,%i,%i" vRT vRA vRC vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvnmsubfp (vRT,vRA,vRC,vRB) ->
    { empty_ins with
    memo=sprintf "vnmsubfp %i,%i,%i,%i" vRT vRA vRC vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvmaxfp (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vmaxfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvminfp (vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vminfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvctsxs (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vctsxs ^o0,^i0,%i" uIM;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvctuxs (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vctuxs ^o0,^i0,%i" uIM;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvcfsx (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vcfsx %i,%i,%i" vRT vRB uIM;
    inputs=[];
    outputs=[]; }::k
| `Pvcfux (vRT,vRB,uIM) ->
    { empty_ins with
    memo=sprintf "vcfux %i,%i,%i" vRT vRB uIM;
    inputs=[];
    outputs=[]; }::k
| `Pvrfim (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vrfim ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvrfin (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vrfin ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvrfip (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vrfip ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvrfiz (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vrfiz ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvcmpbfp (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpbfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpbfp (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpbfp. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpeqfp (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpeqfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpeqfp (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpeqfp. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgefp (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgefp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgefp (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgefp. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtfp (DontSetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtfp %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvcmpgtfp (SetCR0,vRT,vRA,vRB) ->
    { empty_ins with
    memo=sprintf "vcmpgtfp. %i,%i,%i" vRT vRA vRB;
    inputs=[];
    outputs=[]; }::k
| `Pvexptefp (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vexptefp ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvlogefp (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vlogefp ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvrefp (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vrefp ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pvrsqrtefp (vRT,vRB) ->
    { empty_ins with
    memo=sprintf "vrsqrtefp ^o0,^i0" ;
    inputs=[vRB];
    outputs=[vRT]; }::k
| `Pmtvscr (vRB) ->
    { empty_ins with
    memo=sprintf "mtvscr ^i0" ;
    inputs=[vRB];
    outputs=[]; }::k
| `Pmfvscr (vRT) ->
    { empty_ins with
    memo=sprintf "mfvscr ^o0" ;
    inputs=[];
    outputs=[vRT]; }::k
| `Plxsdx (xT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lxsdx %i,0,^o1" xT
      else sprintf "lxsdx %i,^i0,^i1" xT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Plxvd2x (xT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lxvd2x %i,0,^o1" xT
      else sprintf "lxvd2x %i,^i0,^i1" xT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Plxvdsx (xT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lxvdsx %i,0,^o1" xT
      else sprintf "lxvdsx %i,^i0,^i1" xT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Plxvw4x (xT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lxvw4x %i,0,^o1" xT
      else sprintf "lxvw4x %i,^i0,^i1" xT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pstxsdx (xS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stxsdx %i,0,^o1" xS
      else sprintf "stxsdx %i,^i0,^i1" xS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pstxvd2x (xS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stxvd2x %i,0,^o1" xS
      else sprintf "stxvd2x %i,^i0,^i1" xS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pstxvw4x (xS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stxvw4x %i,0,^o1" xS
      else sprintf "stxvw4x %i,^i0,^i1" xS;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pxsabsdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsabsdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsadddp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsadddp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscmpodp (bF,xA,xB) ->
    { empty_ins with
    memo=sprintf "xscmpodp %i,%i,%i" bF xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscmpudp (bF,xA,xB) ->
    { empty_ins with
    memo=sprintf "xscmpudp %i,%i,%i" bF xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscpsgndp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xscpsgndp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvdpsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvdpsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvdpsxds (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvdpsxds %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvdpsxws (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvdpsxws %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvdpuxds (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvdpuxds %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvdpuxws (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvdpuxws %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvspdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvspdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvsxddp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvsxddp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxscvuxddp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xscvuxddp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsdivdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsdivdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmaddmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmaddmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmaddadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmaddadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmaxdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmaxdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmindp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmindp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmsubmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmsubmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmsubadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmsubadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsmuldp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsmuldp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsnabsdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsnabsdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsnegdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsnegdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsnmaddmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsnmaddmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsnmaddadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsnmaddadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsnmsubmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsnmsubmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsnmsubadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xsnmsubadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsrdpi (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsrdpi %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsrdpic (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsrdpic %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsrdpim (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsrdpim %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsrdpip (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsrdpip %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsrdpiz (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsrdpiz %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsredp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsredp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxsrsqrtedp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xsrsqrtedp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxssqrtdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xssqrtdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxssubdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xssubdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxstdivdp (bF,xA,xB) ->
    { empty_ins with
    memo=sprintf "xstdivdp %i,%i,%i" bF xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxstsqrtdp (bF,xB) ->
    { empty_ins with
    memo=sprintf "xstsqrtdp %i,%i" bF xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvabsdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvabsdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvabssp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvabssp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvadddp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvadddp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvaddsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvaddsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcmpeqdp (DontSetCR0,xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcmpeqdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcmpeqsp (DontSetCR0,xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcmpeqsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcmpgedp (DontSetCR0,xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcmpgedp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcmpgesp (DontSetCR0,xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcmpgesp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcmpgtdp (DontSetCR0,xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcmpgtdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcmpgtsp (DontSetCR0,xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcmpgtsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcpsgndp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcpsgndp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcpsgnsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvcpsgnsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvdpsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvdpsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvdpsxds (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvdpsxds %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvdpsxws (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvdpsxws %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvdpuxds (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvdpuxds %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvdpuxws (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvdpuxws %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvspdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvspdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvspsxds (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvspsxds %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvspsxws (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvspsxws %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvspuxds (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvspuxds %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvspuxws (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvspuxws %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvsxddp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvsxddp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvsxdsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvsxdsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvsxwdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvsxwdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvsxwsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvsxwsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvuxddp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvuxddp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvuxdsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvuxdsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvuxwdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvuxwdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvcvuxwsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvcvuxwsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvdivdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvdivdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvdivsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvdivsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmaddmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmaddmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmaddadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmaddadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmaddmsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmaddmsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmaddasp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmaddasp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmaxdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmaxdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmaxsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmaxsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmindp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmindp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvminsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvminsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmsubmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmsubmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmsubadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmsubadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmsubmsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmsubmsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmsubasp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmsubasp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmuldp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmuldp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvmulsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvmulsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnabsdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvnabsdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnabssp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvnabssp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnegdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvnegdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnegsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvnegsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmaddmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmaddmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmaddadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmaddadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmaddmsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmaddmsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmaddasp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmaddasp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmsubmdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmsubmdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmsubadp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmsubadp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmsubmsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmsubmsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvnmsubasp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvnmsubasp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrdpi (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrdpi %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrdpic (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrdpic %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrdpim (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrdpim %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrdpip (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrdpip %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrdpiz (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrdpiz %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvredp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvredp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvresp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvresp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrspi (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrspi %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrspic (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrspic %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrspim (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrspim %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrspip (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrspip %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrspiz (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrspiz %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrsqrtedp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrsqrtedp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvrsqrtesp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvrsqrtesp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvsqrtdp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvsqrtdp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvsqrtsp (xT,xB) ->
    { empty_ins with
    memo=sprintf "xvsqrtsp %i,%i" xT xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvsubdp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvsubdp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvsubsp (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvsubsp %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvtdivdp (bF,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvtdivdp %i,%i,%i" bF xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvtdivsp (bF,xA,xB) ->
    { empty_ins with
    memo=sprintf "xvtdivsp %i,%i,%i" bF xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvtsqrtdp (bF,xB) ->
    { empty_ins with
    memo=sprintf "xvtsqrtdp %i,%i" bF xB;
    inputs=[];
    outputs=[]; }::k
| `Pxvtsqrtsp (bF,xB) ->
    { empty_ins with
    memo=sprintf "xvtsqrtsp %i,%i" bF xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxland (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxland %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxlandc (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxlandc %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxlnor (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxlnor %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxlor (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxlor %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxlxor (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxlxor %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxmrghw (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxmrghw %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxmrglw (xT,xA,xB) ->
    { empty_ins with
    memo=sprintf "xxmrglw %i,%i,%i" xT xA xB;
    inputs=[];
    outputs=[]; }::k
| `Pxxpermdi (xT,xA,xB,dM) ->
    { empty_ins with
    memo=sprintf "xxpermdi %i,%i,%i,%i" xT xA xB dM;
    inputs=[];
    outputs=[]; }::k
| `Pxxsel (xT,xA,xB,xC) ->
    { empty_ins with
    memo=sprintf "xxsel %i,%i,%i,%i" xT xA xB xC;
    inputs=[];
    outputs=[]; }::k
| `Pxxsldwi (xT,xA,xB,sHW) ->
    { empty_ins with
    memo=sprintf "xxsldwi %i,%i,%i,%i" xT xA xB sHW;
    inputs=[];
    outputs=[]; }::k
| `Pxxspltw (xT,xB,uIM) ->
    { empty_ins with
    memo=sprintf "xxspltw %i,%i,%i" xT xB uIM;
    inputs=[];
    outputs=[]; }::k
| `Pdlmzb (DontSetCR0,rA,rS,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dlmzb 0,^o1,^o2" 
      else sprintf "dlmzb ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rS; rB]);
    outputs=[rA; rS; rB]; }::k
| `Pdlmzb (SetCR0,rA,rS,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dlmzb. 0,^o1,^o2" 
      else sprintf "dlmzb. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rS; rB]);
    outputs=[rA; rS; rB]; }::k
| `Pmacchw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchw ^o0,0,^o2" 
      else sprintf "macchw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchw. ^o0,0,^o2" 
      else sprintf "macchw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwo ^o0,0,^o2" 
      else sprintf "macchwo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwo. ^o0,0,^o2" 
      else sprintf "macchwo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchws (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchws ^o0,0,^o2" 
      else sprintf "macchws ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchws (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchws. ^o0,0,^o2" 
      else sprintf "macchws. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchws (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwso ^o0,0,^o2" 
      else sprintf "macchwso ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchws (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwso. ^o0,0,^o2" 
      else sprintf "macchwso. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwu ^o0,0,^o2" 
      else sprintf "macchwu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwu. ^o0,0,^o2" 
      else sprintf "macchwu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwuo ^o0,0,^o2" 
      else sprintf "macchwuo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwuo. ^o0,0,^o2" 
      else sprintf "macchwuo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwsu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwsu ^o0,0,^o2" 
      else sprintf "macchwsu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwsu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwsu. ^o0,0,^o2" 
      else sprintf "macchwsu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwsu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwsuo ^o0,0,^o2" 
      else sprintf "macchwsuo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmacchwsu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "macchwsuo. ^o0,0,^o2" 
      else sprintf "macchwsuo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhw ^o0,0,^o2" 
      else sprintf "machhw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhw. ^o0,0,^o2" 
      else sprintf "machhw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwo ^o0,0,^o2" 
      else sprintf "machhwo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwo. ^o0,0,^o2" 
      else sprintf "machhwo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhws (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhws ^o0,0,^o2" 
      else sprintf "machhws ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhws (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhws. ^o0,0,^o2" 
      else sprintf "machhws. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhws (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwso ^o0,0,^o2" 
      else sprintf "machhwso ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhws (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwso. ^o0,0,^o2" 
      else sprintf "machhwso. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwu ^o0,0,^o2" 
      else sprintf "machhwu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwu. ^o0,0,^o2" 
      else sprintf "machhwu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwuo ^o0,0,^o2" 
      else sprintf "machhwuo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwuo. ^o0,0,^o2" 
      else sprintf "machhwuo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwsu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwsu ^o0,0,^o2" 
      else sprintf "machhwsu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwsu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwsu. ^o0,0,^o2" 
      else sprintf "machhwsu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwsu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwsuo ^o0,0,^o2" 
      else sprintf "machhwsuo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmachhwsu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "machhwsuo. ^o0,0,^o2" 
      else sprintf "machhwsuo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhw ^o0,0,^o2" 
      else sprintf "maclhw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhw. ^o0,0,^o2" 
      else sprintf "maclhw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwo ^o0,0,^o2" 
      else sprintf "maclhwo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwo. ^o0,0,^o2" 
      else sprintf "maclhwo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhws (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhws ^o0,0,^o2" 
      else sprintf "maclhws ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhws (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhws. ^o0,0,^o2" 
      else sprintf "maclhws. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhws (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwso ^o0,0,^o2" 
      else sprintf "maclhwso ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhws (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwso. ^o0,0,^o2" 
      else sprintf "maclhwso. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwu ^o0,0,^o2" 
      else sprintf "maclhwu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwu. ^o0,0,^o2" 
      else sprintf "maclhwu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwuo ^o0,0,^o2" 
      else sprintf "maclhwuo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwuo. ^o0,0,^o2" 
      else sprintf "maclhwuo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwsu (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwsu ^o0,0,^o2" 
      else sprintf "maclhwsu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwsu (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwsu. ^o0,0,^o2" 
      else sprintf "maclhwsu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwsu (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwsuo ^o0,0,^o2" 
      else sprintf "maclhwsuo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmaclhwsu (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "maclhwsuo. ^o0,0,^o2" 
      else sprintf "maclhwsuo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulchw (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulchw ^o0,0,^o2" 
      else sprintf "mulchw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulchw (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulchw. ^o0,0,^o2" 
      else sprintf "mulchw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulchwu (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulchwu ^o0,0,^o2" 
      else sprintf "mulchwu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulchwu (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulchwu. ^o0,0,^o2" 
      else sprintf "mulchwu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulhhw (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulhhw ^o0,0,^o2" 
      else sprintf "mulhhw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulhhw (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulhhw. ^o0,0,^o2" 
      else sprintf "mulhhw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulhhwu (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulhhwu ^o0,0,^o2" 
      else sprintf "mulhhwu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmulhhwu (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mulhhwu. ^o0,0,^o2" 
      else sprintf "mulhhwu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmullhw (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mullhw ^o0,0,^o2" 
      else sprintf "mullhw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmullhw (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mullhw. ^o0,0,^o2" 
      else sprintf "mullhw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmullhwu (DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mullhwu ^o0,0,^o2" 
      else sprintf "mullhwu ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pmullhwu (SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "mullhwu. ^o0,0,^o2" 
      else sprintf "mullhwu. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchw ^o0,0,^o2" 
      else sprintf "nmacchw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchw. ^o0,0,^o2" 
      else sprintf "nmacchw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchwo ^o0,0,^o2" 
      else sprintf "nmacchwo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchwo. ^o0,0,^o2" 
      else sprintf "nmacchwo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchws (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchws ^o0,0,^o2" 
      else sprintf "nmacchws ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchws (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchws. ^o0,0,^o2" 
      else sprintf "nmacchws. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchws (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchwso ^o0,0,^o2" 
      else sprintf "nmacchwso ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmacchws (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmacchwso. ^o0,0,^o2" 
      else sprintf "nmacchwso. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhw ^o0,0,^o2" 
      else sprintf "nmachhw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhw. ^o0,0,^o2" 
      else sprintf "nmachhw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhwo ^o0,0,^o2" 
      else sprintf "nmachhwo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhwo. ^o0,0,^o2" 
      else sprintf "nmachhwo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhws (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhws ^o0,0,^o2" 
      else sprintf "nmachhws ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhws (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhws. ^o0,0,^o2" 
      else sprintf "nmachhws. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhws (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhwso ^o0,0,^o2" 
      else sprintf "nmachhwso ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmachhws (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmachhwso. ^o0,0,^o2" 
      else sprintf "nmachhwso. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhw (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhw ^o0,0,^o2" 
      else sprintf "nmaclhw ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhw (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhw. ^o0,0,^o2" 
      else sprintf "nmaclhw. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhw (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhwo ^o0,0,^o2" 
      else sprintf "nmaclhwo ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhw (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhwo. ^o0,0,^o2" 
      else sprintf "nmaclhwo. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhws (DontSetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhws ^o0,0,^o2" 
      else sprintf "nmaclhws ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhws (DontSetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhws. ^o0,0,^o2" 
      else sprintf "nmaclhws. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhws (SetSOOV,DontSetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhwso ^o0,0,^o2" 
      else sprintf "nmaclhwso ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Pnmaclhws (SetSOOV,SetCR0,rT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "nmaclhwso. ^o0,0,^o2" 
      else sprintf "nmaclhwso. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rT; rA; rB]);
    outputs=[rT; rA; rB]; }::k
| `Picbi (rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "icbi 0,^o1" 
      else sprintf "icbi ^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Picbt (cT,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "icbt %i,0,^o1" cT
      else sprintf "icbt %i,^i0,^i1" cT;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pdcba (rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dcba 0,^o1" 
      else sprintf "dcba ^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pdcbt (rA,rB,tH) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dcbt 0,^o1,%i" tH
      else sprintf "dcbt ^i0,^i1,%i" tH;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pdcbtst (rA,rB,tH) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dcbtst 0,^o1,%i" tH
      else sprintf "dcbtst ^i0,^i1,%i" tH;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pdcbz (rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dcbz 0,^o1" 
      else sprintf "dcbz ^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pdcbst (rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dcbst 0,^o1" 
      else sprintf "dcbst ^i0,^i1" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pdcbf (rA,rB,l) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "dcbf 0,^o1,%i" l
      else sprintf "dcbf ^i0,^i1,%i" l;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rA; rB]);
    outputs=[rA; rB]; }::k
| `Pisync ->
    { empty_ins with
    memo=sprintf "isync " ;
    inputs=[];
    outputs=[]; }::k
| `Plbarx (rT,rA,rB,eH) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lbarx ^o0,0,^i0,%i" eH
      else sprintf "lbarx ^o0,^i0,^i1,%i" eH;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plharx (rT,rA,rB,eH) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lharx ^o0,0,^i0,%i" eH
      else sprintf "lharx ^o0,^i0,^i1,%i" eH;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Plwarx (rT,rA,rB,eH) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "lwarx ^o0,0,^i0,%i" eH
      else sprintf "lwarx ^o0,^i0,^i1,%i" eH;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pstbcx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stbcx. ^o0,0,^o2" 
      else sprintf "stbcx. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rS; rA; rB]);
    outputs=[rS; rA; rB]; }::k
| `Psthcx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "sthcx. ^o0,0,^o2" 
      else sprintf "sthcx. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rS; rA; rB]);
    outputs=[rS; rA; rB]; }::k
| `Pstwcx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stwcx. ^o0,0,^o2" 
      else sprintf "stwcx. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rS; rA; rB]);
    outputs=[rS; rA; rB]; }::k
| `Pldarx (rT,rA,rB,eH) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "ldarx ^o0,0,^i0,%i" eH
      else sprintf "ldarx ^o0,^i0,^i1,%i" eH;
    inputs=
      (if rA = A.Ireg A.GPR0 then [rB] else [rA; rB]);
    outputs=[rT]; }::k
| `Pstdcx (rS,rA,rB) ->
    { empty_ins with
    memo= if rA = A.Ireg A.GPR0
      then sprintf "stdcx. ^o0,0,^o2" 
      else sprintf "stdcx. ^i0,^i1,^i2" ;
    inputs=
      (if rA = A.Ireg A.GPR0 then [] else [rS; rA; rB]);
    outputs=[rS; rA; rB]; }::k
| `Psync (l) ->
    { empty_ins with
    memo=sprintf "sync %i" l;
    inputs=[];
    outputs=[]; }::k
| `Peieio ->
    { empty_ins with
    memo=sprintf "eieio " ;
    inputs=[];
    outputs=[]; }::k
| `Pmbar (mO) ->
    { empty_ins with
    memo=sprintf "mbar %i" mO;
    inputs=[];
    outputs=[]; }::k
| `Pwait (wC) ->
    { empty_ins with
    memo=sprintf "wait %i" wC;
    inputs=[];
    outputs=[]; }::k
